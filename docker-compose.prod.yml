version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:13-alpine
    container_name: travel-database
    restart: always
    env_file: .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - travel-net
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-travel_user} -d ${POSTGRES_DB:-travel_planner}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: travel-backend
    restart: always
    env_file: .env.prod
   # environment:
      # Database
    #  - DATABASE_URL=postgresql://travel_user:secure_travel_pass_2024@database:5432/travel_planner
      # API Keys
     # - GROQ_API_KEY=${GROQ_API_KEY}
     # - GEMINI_API_KEY=${GEMINI_API_KEY}
     # - LLM_PROVIDER=${LLM_PROVIDER:-groq}
      # Security
     # - SECRET_KEY=your-super-secret-jwt-key-change-in-production
     # - ACCESS_TOKEN_EXPIRE_MINUTES=30
     # - ALGORITHM=HS256
      # App Settings
     # - DEBUG=false
     # - ALLOWED_HOSTS=localhost,127.0.0.1
    depends_on:
      database:
        condition: service_healthy
    networks:
      - travel-net
    expose:
      - "8000"
    security_opt:
      - no-new-privileges:true

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: travel-frontend
    command: streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0
    restart: always
    environment:
      - BACKEND_URL=http://backend:8000
      - DATABASE_URL=postgresql://travel_user:secure_travel_pass_2024@database:5432/travel_planner
    depends_on:
      backend:
        condition: service_started
      database:
        condition: service_healthy
    networks:
      - travel-net
    expose:
      - "8501"
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: travel-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
    networks:
      - travel-net
    depends_on:
      - backend
      - frontend

networks:
  travel-net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
